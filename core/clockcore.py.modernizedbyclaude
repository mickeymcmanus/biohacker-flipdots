#!/usr/bin/env python3
"""
Clock Core Module

This module provides clock functionality for the flipdot display,
including digital clocks, binary clocks, and countdown timers.
"""

import time
from datetime import datetime, timedelta
from typing import Dict, Any, Union, Optional, ByteString
import serial
from . import core

__author__ = 'boselowitz (modernized version)'

# Character definitions for the clock display
CLOCK_CHARS = {
    "0": b"\x3e\x45\x49\x3e",
    "1": b"\x01\x21\x7f\x01",
    "2": b"\x23\x45\x49\x31",
    "3": b"\x22\x49\x49\x36",
    "4": b"\x0c\x14\x24\x7f",
    "5": b"\x72\x51\x51\x4e",
    "6": b"\x1e\x29\x49\x06",
    "7": b"\x40\x47\x48\x70",
    "8": b"\x36\x49\x49\x36",
    "9": b"\x30\x49\x4a\x3c",
    ":": b"\x14",
    '?': b' OH0',
    "space": b"\x00"
}

# Display constants
TCOLUMN_CLOCK = 35
BITMASK = [1, 2, 4, 8, 0x10, 0x20, 0x40]
DEFAULT_DELAY = 0.2
ROW_BREAK = 75
TROW = 7

# Justification constants
class Justify:
    RIGHT = 1
    LEFT = 2
    CENTER = 3

# Control commands
RESET = b'\x81'
ROW1 = b'\x81'
ROW2 = b'\x82'


class FallbackSerialSecondary:
    """Fallback text-based display when hardware is not available."""
    
    def __init__(self):
        """Initialize the text-based display."""
        self.last_message_was_control = False
        self.cursor_position = 0
        self.screen_matrix = []
        
    def write(self, message: bytes) -> None:
        """
        Simulate writing to the flipdot display.
        
        Args:
            message: Bytes to send to the display
        """
        for char_byte in message:
            # Python 3 returns int for bytes iteration
            character = char_byte
            
            if character > 128:
                # Row set
                if self.last_message_was_control:
                    self.cursor_position += (character - 129) * ROW_BREAK
                    self.last_message_was_control = False
                # Col set
                else:
                    self.cursor_position = character - 129
                    self.last_message_was_control = True
            else:
                # Initialize screen matrix if needed
                if not self.screen_matrix:
                    self.screen_matrix = [["." for _ in range(TCOLUMN_CLOCK)] for _ in range(TROW)]
                
                character_value = character
                for row in range(TROW):
                    row_inverse = 6 - row
                    if self.cursor_position < len(self.screen_matrix[row]):
                        if character_value & BITMASK[row_inverse]:
                            character_value -= BITMASK[row_inverse]
                            self.screen_matrix[row][self.cursor_position] = "0"
                        else:
                            self.screen_matrix[row][self.cursor_position] = "."
                
                # Print the screen matrix
                for row in range(TROW):
                    print(" ".join(self.screen_matrix[row]))
                print("\n")
                
                self.cursor_position += 1
                self.last_message_was_control = False


class ClockDisplay:
    """Controller for the clock display."""
    
    def __init__(self, port: str = '/dev/tty.usbserial-A3000lDq', baud: int = 38400):
        """
        Initialize the clock display.
        
        Args:
            port: Serial port for the display
            baud: Baud rate for serial communication
        """
        try:
            self.serial = serial.Serial(port, baud)
            print(f"Connected to clock display on {port}")
        except (serial.SerialException, OSError):
            print("Secondary serial port not opened, falling back to text output")
            self.serial = FallbackSerialSecondary()
    
    def get_bytes(self, text: str, delim: bytes = CLOCK_CHARS["space"], dmult: int = 1) -> bytes:
        """
        Convert text to display bytes with delimiter between characters.
        
        Args:
            text: Text to convert
            delim: Delimiter to use between characters
            dmult: Number of times to repeat the delimiter
            
        Returns:
            Byte representation of the text
        """
        buf = b''
        for x in text:
            if x not in CLOCK_CHARS:
                buf += CLOCK_CHARS.get('?', b'\x00')
            else:
                buf += CLOCK_CHARS[x]
            buf += delim * dmult
        
        # Remove the last delimiter
        return buf[:-len(delim * dmult)] if dmult > 0 and delim else buf
    
    def pad(self, message: bytes, padsym: str = '', justify: int = Justify.CENTER) -> bytes:
        """
        Pad a message to fill the display width with the given symbol.
        
        Args:
            message: Bytes to pad
            padsym: Symbol to use for padding
            justify: Justification (LEFT, RIGHT, or CENTER)
            
        Returns:
            Padded message
        """
        message = CLOCK_CHARS['space'] + message + CLOCK_CHARS['space']
        
        if padsym:
            padsym_bytes = CLOCK_CHARS['space'] + CLOCK_CHARS['space'].join(
                [CLOCK_CHARS[x] for x in padsym if x in CLOCK_CHARS]
            )
        else:
            padsym_bytes = CLOCK_CHARS['space']
            
        if TCOLUMN_CLOCK - len(message) < len(padsym_bytes):
            # Not enough space for padding, use spaces
            padsym_bytes = CLOCK_CHARS['space']
            
        padlen = (TCOLUMN_CLOCK - len(message)) // len(padsym_bytes)
        extrachr = (TCOLUMN_CLOCK - len(message)) % len(padsym_bytes)
        
        if justify == Justify.LEFT:
            return message + (padlen * padsym_bytes) + (extrachr * CLOCK_CHARS['space'])
        elif justify == Justify.RIGHT:
            return (extrachr * CLOCK_CHARS['space']) + (padlen * padsym_bytes) + message
        elif justify == Justify.CENTER:
            if extrachr % 2 == 0:
                sp1 = sp2 = extrachr // 2
            else:
                sp2 = extrachr // 2
                sp1 = sp2 + 1
                
            if padlen % 2 == 0:
                pad_left = pad_right = padlen // 2
            else:
                pad_right = padlen // 2
                pad_left = pad_right + 1
                
            return (sp1 * CLOCK_CHARS['space']) + (pad_left * padsym_bytes) + message + \
                   (pad_right * padsym_bytes) + (sp2 * CLOCK_CHARS['space'])
        else:
            raise ValueError(f"Unknown justification: {justify}")
    
    def fill(self, message: bytes, fillmask: int = 127) -> bytes:
        """
        Fill the display with the given byte pattern.
        
        Args:
            message: Bytes to display
            fillmask: Bitmask for filtering display content
            
        Returns:
            The displayed message
        """
        self.serial.write(RESET + ROW1)
        
        for i, char in enumerate(message):
            if i == ROW_BREAK:
                self.serial.write(RESET + ROW2)
            
            # Apply the fillmask and write the byte
            self.serial.write(bytes([char & fillmask]))
        
        return message
    
    def clear(self) -> None:
        """Clear the display."""
        self.fill(b"\x00" * TCOLUMN_CLOCK)
    
    def display_clock(self) -> None:
        """
        Display a digital clock showing the current time.
        Runs in an infinite loop until interrupted.
        """
        try:
            while True:
                current_time = time.strftime("%H:%M:%S")
                time_bytes = self.get_bytes(current_time)
                padded_time = self.pad(time_bytes, justify=Justify.CENTER)
                self.fill(padded_time)
                time.sleep(1)
        except KeyboardInterrupt:
            print("Clock display stopped")
    
    def display_binary_clock(self) -> None:
        """
        Display a binary clock showing hours, minutes, and seconds.
        Runs in an infinite loop until interrupted.
        """
        try:
            while True:
                now = datetime.now()
                hour = now.hour
                minute = now.minute
                second = now.second
                
                # Build the binary display
                display_bytes = bytearray()
                
                for power in range(6):
                    power = 5 - power
                    col = 0
                    
                    # Hours (top row)
                    if hour >= (2 ** power):
                        hour -= 2 ** power
                        col |= BITMASK[6]
                    
                    # Minutes (middle row)
                    if minute >= (2 ** power):
                        minute -= 2 ** power
                        col |= BITMASK[3]
                    
                    # Seconds (bottom row)
                    if second >= (2 ** power):
                        second -= 2 ** power
                        col |= BITMASK[0]
                    
                    display_bytes.append(col)
                
                # Add the current time in digital format
                current_time = time.strftime("%H:%M")
                time_bytes = self.get_bytes(current_time)
                
                # Combine binary and digital displays
                full_display = bytes(display_bytes) + CLOCK_CHARS["space"] * 3 + time_bytes
                
                # Update the display
                self.fill(full_display)
                time.sleep(1)
        
        except KeyboardInterrupt:
            print("Binary clock display stopped")
    
    def strfdelta(self, tdelta: timedelta, fmt: str) -> str:
        """
        Format a timedelta object as a string.
        
        Args:
            tdelta: Timedelta to format
            fmt: Format string with {days}, {hours}, {minutes}, {seconds} placeholders
            
        Returns:
            Formatted string
        """
        d = {"days": tdelta.days}
        d["hours"], rem = divmod(tdelta.seconds, 3600)
        d["minutes"], d["seconds"] = divmod(rem, 60)
        return fmt.format(**d)
    
    def display_countdown(self, finish_message: bytes) -> None:
        """
        Display an animated countdown.
        
        Args:
            finish_message: Message to display when countdown completes
        """
        previous_fill = b""
        fill_in_value = b"\x7f" * TCOLUMN_CLOCK
        flipdot = core.FlipdotDisplay()  # Use core module for negative function
        
        for hex_value in fill_in_value:
            for position in range(TROW):
                if len(previous_fill) % 2 == 0:
                    flip_with_new_dot = hex_value | BITMASK[position]
                    masked_off_top_bits = bytes([flip_with_new_dot & (0x7f >> (6 - position))])
                else:
                    pos = 6 - position
                    flip_with_new_dot = hex_value | BITMASK[pos]
                    masked_off_top_bits = bytes([flip_with_new_dot & (0x7f << pos)])
                
                self.fill(previous_fill + masked_off_top_bits)
                time.sleep(0.12)
                self.fill(flipdot.negative(previous_fill) + masked_off_top_bits)
                time.sleep(0.12)
            
            previous_fill += masked_off_top_bits
            self.fill(previous_fill)
        
        self.fill(finish_message)
    
    def display_countdown_timer(self, delta: timedelta = timedelta(seconds=59)) -> None:
        """
        Display a countdown timer.
        
        Args:
            delta: Duration of the countdown
        """
        flipdot = core.FlipdotDisplay()  # Use core module for negative function
        future_date = datetime.now() + delta
        
        try:
            while future_date > datetime.now():
                # Get remaining time
                remaining = future_date - datetime.now()
                
                # Format and display the time
                time_str = self.strfdelta(remaining, "{minutes}:{seconds:02d}")
                time_bytes = self.get_bytes(time_str)
                padded_time = self.pad(time_bytes)
                
                # Alternate between normal and inverted display
                self.fill(padded_time)
                time.sleep(0.5)
                self.fill(flipdot.negative(padded_time))
                time.sleep(0.5)
                
            # Clear when done
            self.clear()
            print("Countdown complete")
            
        except KeyboardInterrupt:
            print("Countdown stopped")


# Initialize the clock display
try:
    clock_display = ClockDisplay()
except Exception as e:
    print(f"Error initializing clock display: {e}")

# For backward compatibility
ser_secondary = clock_display.serial

# For backward compatibility - module-level functions that use the clock_display instance
def get_bytes(m, delim=CLOCK_CHARS["space"], dmult=1):
    return clock_display.get_bytes(m, delim, dmult)

def pad(m, padsym='', justify=Justify.CENTER):
    return clock_display.pad(m, padsym, justify)

def fill(m, fillmask=127):
    return clock_display.fill(m, fillmask)

def clear():
    return clock_display.clear()

def display_clock():
    return clock_display.display_clock()

def display_binary_clock():
    return clock_display.display_binary_clock()

def display_count_down(finish_message):
    return clock_display.display_countdown(finish_message)

def strfdelta(tdelta, fmt):
    return clock_display.strfdelta(tdelta, fmt)

def display_count_down2(delta=timedelta(seconds=59)):
    return clock_display.display_countdown_timer(delta)


if __name__ == "__main__":
    # Example usage when run directly
    print("Clock Core Module")
    print("1. Digital Clock")
    print("2. Binary Clock")
    print("3. Countdown Timer (60s)")
    
    try:
        choice = input("Select a clock type (1-3): ")
        if choice == "1":
            clock_display.display_clock()
        elif choice == "2":
            clock_display.display_binary_clock()
        elif choice == "3":
            clock_display.display_countdown_timer()
        else:
            print("Invalid choice")
    except KeyboardInterrupt:
        print("\nExiting...")
