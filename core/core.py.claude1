p = b'\x08\x1c\x3e\x08\x08\x7f'#arrow pattern
pqman = b'\x22\x36\x2a\x22\x1c'
pcbugs = b'\x1e\x34\x22\x34\x1e'
# if trailpattern is set as '\x00'..it will erase the trail of the arrow
# Any other value to trailpatterin will fill the trail with that pattern..
picklist =  [b'\x01', b'\x02', b'\x04', b'\x08', b'\x10', b' b', b'@', b'@', b' b', b'\x10', b'\x08', b'\x04', b'\x02', b'\x01']
opicklist = [b'@', b' b', b'\x10', b'\x08', b'\x04', b'\x02', b'\x01', b'\x01', b'\x02', b'\x04', b'\x08', b'\x10', b' b', b'@']
mpicklist = bytes([x[0][0] | x[1][0] for x in zip(picklist,opicklist)])
#mpicklist is a OR of two sine wave defined by picklist and opicklist

#if we want multi-column animation while its moving left to right..say like that of a pac man eating effect..
#picklist should contain the series of patterns and picklen should always be 1 . Also..each animation should be of the same width(maybe..not sure)
#for e.g. to have the arrow example grow and shrink its triangle head height we would pass into picklen something such as
#picklist = ['\x08\x1c\x3e\x08\x08\x7f','\x08\x08\x1c\x08\x08\x7f','\x08\x08\x08\x08\x08\x7f','\x08\x08\x1c\x08\x08\x7f']
#pac man open close mouth example would be ['\x22\x36\x2a\x22\x1c','\x14\x2a\x22\x22\x1c','\x1c\x22\x22\x22\x1c','\x14\x2a\x22\x22\x1c']
# new big pacman = ['\x41\x36\x77\x7f\x7f\x3e\x1c','\x22\x77\x7f\x7f\x7f\x3e\x1c','\x16\x3e\x7f\x7f\x7f\x3e\x1c','\x1c\x3e\x7f\x7f\x7f\x3e\x1c','\x16\x3e\x7f\x7f\x7f\x3e\x1c','\x22\x77\x7f\x7f\x7f\x3e\x1c']
# and the pcbugs bliking eye would be ['\x1e\x34\x22\x34\x1e','\x1e\x24\x22\x24\x1e']
#new big pacbugs = ['\x3f\x42\x51\x42\x51\x42\x3f','\x3f\x42\x41\x42\x41\x42\x3f']
pacmanlist = [b'\x00\x41\x63\x77\x7f\x3e\x1c',b'\x22\x77\x7f\x7f\x7f\x3e\x1c',b'\x1c\x3e\x7f\x7f\x7f\x3e\x1c',b'\x22\x77\x7f\x7f\x7f\x3e\x1c',b'\x00\x41\x63\x77\x7f\x3e\x1c']
pacmonsterlist = [b'\x3f\x42\x51\x42\x51\x42\x3f',b'\x3f\x42\x41\x42\x41\x42\x3f']
def drawpacman(trail=0,d=1,t=DEFAULT_DELAY):
    if trail == 0:
        trailpattern = b'\x00'
    else:
        trailpattern = b''
    drawpatternlefttoright(p=b'',trailpattern = trailpattern,dist = d,picklist = pacmanlist,picklen=1,t=t)

def drawpacmanchased(monstersnum=2,d=10,t=DEFAULT_DELAY):
    pacmanchased = []
    for i in range(len(pacmanlist)):
        pacmanchased.append(pacmanlist[i]+b'\x00'*d+pacmonsterlist[i%2]+b'\x00'*d+pacmonsterlist[(i+1)%2])
    drawpatternlefttoright(trailpattern = b'\x00',t=t,picklist = pacmanchased)    

def drawpatternlefttoright(p=b'',trailpattern='',dist = 1,picklist=None,picklen=1,t=DEFAULT_DELAY):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    pr = p[::-1]
    plen = len(pr)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    colst = 129 #'\x81'
    rowst = 129 #'\x81'
    '''if not direction:
        colst = 129 #'\x81'
        rowst = 129 #'\x81'
    else:
        colst = 199 #'\xc7'
        rowst = 130 #'\x82'
        '''
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if picklen == 1:
                p = picklist[st]+trailpattern
                pr = p[::-1]
            else:
                if st+picklen <= len(picklist):
                    pr = trailpattern+''.join(picklist[st:st+picklen])
                else:
                    pr = trailpattern+''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])
            plen = len(pr)
            #pr = p[::-1]
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                if picklist and picklen == 1:
                    st = i % len(picklist)
                    p = picklist[st]+trailpattern
                    pr = p[::-1]
                nx = -i - 1
                raw_send(pr[nx:],colst,rowst)
                if i < plen-1:
                    time.sleep(t)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")
        time.sleep(t)
            

def drawpatternrighttoleft(p='',trailpattern='',dist = 1,picklist=None,picklen=1):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    plen = len(p)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    pr = p[::-1]
    colst = 199 #'\xc7'
    rowst = 130 #'\x82'
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if st+picklen <= len(picklist):
                p = ''.join(picklist[st:st+picklen])+trailpattern
            else:
                p = ''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])+trailpattern
            pr = p
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                nx = -i - 1
                raw_send(pr[nx:],colst-i,rowst)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")

# Functions for double-height text support
def double_height_char(char_bytes):
    """
    Convert a single height character to double height by duplicating each bit vertically
    char_bytes: The byte representation of a character
    returns: The byte representation of the double-height character
    """
    result = b''
    
    for byte in char_bytes:
        # Create two bytes from each original byte
        # Each bit in the original becomes two identical bits vertically
        new_byte1 = 0
        new_byte2 = 0
        
        for bit_pos in range(7):  # Process 7 bits (0-6)
            if byte & (1 << bit_pos):
                # If bit is set, set corresponding bits in new bytes
                # For a more natural stretch, duplicate each bit
                new_byte1 |= (1 << bit_pos)
                new_byte2 |= (1 << bit_pos)
        
        result += bytes([new_byte1]) + bytes([new_byte2])
    
    return result

def getbytes_double_height(message, delim=dict['space'], dmult=1):
    """
    Convert a string to double-height bytes
    Similar to getbytes but creates double-height characters
    """
    if CURRENT_CONFIG != "double_height":
        set_display_config("double_height")
    
    buf = b''
    for x in message:
        if not dict.get(x):
            char_bytes = double_height_char(dict['?'])
        else:
            char_bytes = double_height_char(dict[x])
        buf += char_bytes
        buf += double_height_char(delim*dmult)
    
    # Remove the last delimiter
    delim_length = len(double_height_char(delim*dmult))
    return buf[:len(buf)-delim_length]

def flip_double_height(message, d=1):
    """
    Display double-height text
    message: The text to display
    d: Delay between updates (default: 1)
    """
    if CURRENT_CONFIG != "double_height":
        set_display_config("double_height")
    
    i = 0
    ser_main.write(reset+row1)
    
    for k in message:
        i += 1
        if not dict.get(k):
            c = double_height_char(dict['?'])
        else:
            c = double_height_char(dict[k])
        
        if i > 15:
            if i == 16:
                ser_main.write(reset+row2)
            c = c[::-1]  # String reversal as in original flip function
        
        ser_main.write(c)

def dual_row_text(top_text, bottom_text, justify=CENTER_JUSTIFY):
    """
    Display text in two rows on a double-height display
    top_text: Text for the top row
    bottom_text: Text for the bottom row
    justify: Justification (LEFT_JUSTIFY, RIGHT_JUSTIFY, or CENTER_JUSTIFY)
    """
    if CURRENT_CONFIG != "dual_row":
        set_display_config("dual_row")
    
    # Prepare the top row
    top_bytes = getbytes(top_text)
    top_padded = pad(top_bytes, justify=justify)
    
    # Prepare the bottom row
    bottom_bytes = getbytes(bottom_text)
    bottom_padded = pad(bottom_bytes, justify=justify)
    
    # Display the top row
    ser_main.write(reset+row1)
    for i in range(len(top_padded)):
        if i < TCOLUMN:
            ser_main.write(bytes([top_padded[i]]))
    
    # Display the bottom row
    ser_main.write(reset+row2)
    for i in range(len(bottom_padded)):
        if i < TCOLUMN:
            ser_main.write(bytes([bottom_padded[i]]))

# Example usage functions

def display_standard_text(text, justify=CENTER_JUSTIFY):
    """
    Display standard height text
    """
    set_display_config("standard")
    message_bytes = getbytes(text)
    padded = pad(message_bytes, justify=justify)
    fill(padded)

def display_double_height_text(text, justify=CENTER_JUSTIFY):
    """
    Display double height text
    """
    set_display_config("double_height")
    message_bytes = getbytes_double_height(text)
    padded = pad(message_bytes, justify=justify)
    fill(padded)

def display_dual_row_text(top_text, bottom_text, justify=CENTER_JUSTIFY):
    """
    Display two rows of text on a double-height display
    """
    set_display_config("dual_row")
    dual_row_text(top_text, bottom_text, justify)

def scroll_double_height_text(text, delay=0.1):
    """
    Scroll double height text from right to left
    """
    set_display_config("double_height")
    message_bytes = getbytes_double_height(text)
    scrollleft(message_bytes, t=delay)

# Examples of how to use the new display modes:
# display_standard_text("HELLO WORLD")
# display_double_height_text("BIG TEXT")
# display_dual_row_text("TOP ROW", "BOTTOM ROW")
# scroll_double_height_text("SCROLLING BIG TEXT", delay=0.05)
