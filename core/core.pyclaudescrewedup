def fillmakerbot(message):
    col = 129
    row = 129
    for hex_value in message:
        for position in range(TROW):
            if(col % 2 == 0):
                # For even columns, ensure position doesn't exceed BITMASK length
                safe_position = min(position, 6)
                flip_with_new_dot = hex_value | BITMASK[safe_position]
                masked_off_top_bits = flip_with_new_dot & (0x7f >> (6 - safe_position))
            else:
                # For odd columns, ensure we don't get a negative shift value
                safe_position = min(position, 6)
                adjusted_position = 6 - safe_position  # This will always be non-negative
                flip_with_new_dot = hex_value | BITMASK[safe_position]
                masked_off_top_bits = flip_with_new_dot & (0x7f << adjusted_position)
            
            raw_send(bytes([masked_off_top_bits]), col=col, row=row)
            time.sleep(.06)
        
        raw_send(bytes([hex_value]), col=col, row=row)
        col += 1

        if col == 204:
            row += 1
            col = 129

def fillfrombottomup(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(len(BITMASK)):
        btm += BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def fillfromtopdown(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(len(BITMASK)-1,-1,-1):
        btm += BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def scrolldown(m,t=DEFAULT_DELAY,wraparound = False):
    for k in range(TROW):
#  modified this with bytes() for python 3
        m = b''.join([bytes([x>>1]) for x in m])
        fill(m)
        time.sleep(t)
    return m

def scrollup(m,t=DEFAULT_DELAY,wraparound = False):
    for k in range(TROW):
#  was this in python 2      m = b''.join([(x<<1)&127 for x in m])
        m = b''.join([bytes([ (x<<1)&127 ]) for x in m])
        fill(m)
        time.sleep(t)
    return m

def erasefromtopdown(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(len(BITMASK)-1,-1,-1):
        btm -= BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def erasefrombottomup(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(len(BITMASK)):
        btm -= BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def fillrandomorder(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(8):
        if k < 6:
            btm= min(random.getrandbits(TROW),127)
        else:
            btm= min(btm+random.getrandbits(TROW),127)
        fill(m,btm)
        time.sleep(t)
    if btm < 127:
        fill(m) #fill it all up in case any of thme are left out
    return m

        # dmult is the # of times delim will be multiplied in succession
def eraserandomorder(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(8):
        if k < 6:
            btm= max(random.getrandbits(TROW),127)
        else:
            btm= max(btm+random.getrandbits(TROW),127)
        fill(m,btm)
        time.sleep(t)
    if btm < 127:
        clear() #fill it all up in case any of thme are left out
    return m

        # dmult is the # of times delim will be multiplied in succession
def getbytes(m,delim=dict['space'],dmult=1): 
    buf = b''
    #m = repr(m)
    for x in m:
        if not dict.get(x):
            buf+=dict['?']
        else:
            buf+=dict[x]
        buf+=delim*dmult
    return buf[:len(buf)-len(delim*dmult)] #remove the last delim..since we want it only between chars

                   
def rotateleft(m,t=DEFAULT_DELAY,d = 1): #d is number of columns to be moved each shift
    for k in range(old_div(TCOLUMN,d)):
        fill(m)
        m = m[d:]+m[:d]
        time.sleep(t)
    return m

def rotateright(m,t=DEFAULT_DELAY,d = 1): #d is number of columns to be moved each shift
    for k in range(old_div(TCOLUMN,d)):
        fill(m)
        m = m[-d:]+m[:-d]
        time.sleep(t)
    return m

def scrollleft(m,t=DEFAULT_DELAY,d = 1,pausedelay=None, o=False):
    if not o:
        m = TCOLUMN*dict['space'] + m + TCOLUMN*dict['space']
    else:
        m = TCOLUMN*dict['space'] + m 
    mlen = len(m) - TCOLUMN
    for k in range((old_div(mlen,d))+1):
        fill(m[k*d:(k*d)+TCOLUMN])
        if pausedelay:
            if k == old_div(((old_div(mlen,d))+1),2):
                time.sleep(pausedelay-t)
        #m = m[d:]+m[:d]
        time.sleep(t)
    return m
    
def negative(m): #returns the negative image of the buffer m
# modified with bytes for python 3
    m = b''.join([bytes([x ^ 127]) for x in m])
    return m

def raw_send(b,col=None,row=None): #sends byte b to the flip dot specified by column and row
    print((col,row,[x for x in b]))
    if col:
        ser_main.write(bytes([col]))
    if row:
        ser_main.write(bytes([row]))
    ser_main.write(b)

def drawpacman(trail=0,d=1,t=DEFAULT_DELAY):
    if trail == 0:
        trailpattern = b'\x00'
    else:
        trailpattern = b''
    drawpatternlefttoright(p=b'',trailpattern = trailpattern,dist = d,picklist = pacmanlist,picklen=1,t=t)

def drawpacmanchased(monstersnum=2,d=10,t=DEFAULT_DELAY):
    pacmanchased = []
    for i in range(len(pacmanlist)):
        pacmanchased.append(pacmanlist[i]+b'\x00'*d+pacmonsterlist[i%2]+b'\x00'*d+pacmonsterlist[(i+1)%2])
    drawpatternlefttoright(trailpattern = b'\x00',t=t,picklist = pacmanchased)    

def drawpatternlefttoright(p=b'',trailpattern='',dist = 1,picklist=None,picklen=1,t=DEFAULT_DELAY):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    pr = p[::-1]
    plen = len(pr)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    colst = 129 #'\x81'
    rowst = 129 #'\x81'
    '''if not direction:
        colst = 129 #'\x81'
        rowst = 129 #'\x81'
    else:
        colst = 199 #'\xc7'
        rowst = 130 #'\x82'
        '''
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if picklen == 1:
                p = picklist[st]+trailpattern
                pr = p[::-1]
            else:
                if st+picklen <= len(picklist):
                    pr = trailpattern+''.join(picklist[st:st+picklen])
                else:
                    pr = trailpattern+''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])
            plen = len(pr)
            #pr = p[::-1]
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                if picklist and picklen == 1:
                    st = i % len(picklist)
                    p = picklist[st]+trailpattern
                    pr = p[::-1]
                nx = -i - 1
                raw_send(pr[nx:],colst,rowst)
                if i < plen-1:
                    time.sleep(t)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")
        time.sleep(t)
            

def drawpatternrighttoleft(p='',trailpattern='',dist = 1,picklist=None,picklen=1):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    plen = len(p)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    pr = p[::-1]
    colst = 199 #'\xc7'
    rowst = 130 #'\x82'
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if st+picklen <= len(picklist):
                p = ''.join(picklist[st:st+picklen])+trailpattern
            else:
                p = ''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])+trailpattern
            pr = p
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                nx = -i - 1
                raw_send(pr[nx:],colst-i,rowst)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")

# Functions for double-height text support
def double_height_char(char_bytes):
    """
    Convert a single height character to double height by duplicating each bit vertically
    char_bytes: The byte representation of a character
    returns: The byte representation of the double-height character
    """
    result = b''
    
    for byte in char_bytes:
        # Create two bytes from each original byte
        # Each bit in the original becomes two identical bits vertically
        new_byte1 = 0
        new_byte2 = 0
        
        for bit_pos in range(7):  # Process 7 bits (0-6)
            if byte & (1 << bit_pos):
                # If bit is set, set corresponding bits in new bytes
                # For a more natural stretch, duplicate each bit
                new_byte1 |= (1 << bit_pos)
                new_byte2 |= (1 << bit_pos)
        
        result += bytes([new_byte1]) + bytes([new_byte2])
    
    return result

def getbytes_double_height(message, delim=dict['space'], dmult=1):
    """
    Convert a string to double-height bytes
    Similar to getbytes but creates double-height characters
    """
    # Ensure we have enough rows for double-height text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
    
    buf = b''
    for x in message:
        if not dict.get(x):
            char_bytes = double_height_char(dict['?'])
        else:
            char_bytes = double_height_char(dict[x])
        buf += char_bytes
        buf += double_height_char(delim*dmult)
    
    # Remove the last delimiter
    delim_length = len(double_height_char(delim*dmult))
    return buf[:len(buf)-delim_length]

def flip_double_height(message, d=1):
    """
    Display double-height text
    message: The text to display
    d: Delay between updates (default: 1)
    """
    # Ensure we have enough rows for double-height text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
    
    i = 0
    ser_main.write(reset+row1)
    
    for k in message:
        i += 1
        if not dict.get(k):
            c = double_height_char(dict['?'])
        else:
            c = double_height_char(dict[k])
        
        if i > 15:
            if i == 16:
                ser_main.write(reset+row2)
            c = c[::-1]  # String reversal as in original flip function
        
        ser_main.write(c)

def dual_row_text(top_text, bottom_text, justify=CENTER_JUSTIFY):
    """
    Display text in two rows on a display
    top_text: Text for the top row
    bottom_text: Text for the bottom row
    justify: Justification (LEFT_JUSTIFY, RIGHT_JUSTIFY, or CENTER_JUSTIFY)
    """
    # Ensure we have at least 14 rows (2 * 7) for dual row text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
    
    # Prepare the top row
    top_bytes = getbytes(top_text)
    top_padded = pad(top_bytes, justify=justify)
    
    # Prepare the bottom row
    bottom_bytes = getbytes(bottom_text)
    bottom_padded = pad(bottom_bytes, justify=justify)
    
    # Display the top row
    ser_main.write(reset+row1)
    for i in range(len(top_padded)):
        if i < TCOLUMN:
            ser_main.write(bytes([top_padded[i]]))
    
    # Display the bottom row
    ser_main.write(reset+row2)
    for i in range(len(bottom_padded)):
        if i < TCOLUMN:
            ser_main.write(bytes([bottom_padded[i]]))

# Multi-row text display for displays with more than 14 rows
def multi_row_text(text_list, justify=CENTER_JUSTIFY):
    """
    Display multiple rows of text on a tall display
    text_list: List of text strings to display on separate rows
    justify: Justification (LEFT_JUSTIFY, RIGHT_JUSTIFY, or CENTER_JUSTIFY)
    
    Returns:
    int: Number of rows successfully displayed
    """
    # Calculate how many rows we can display (each row needs 7 pixels)
    max_rows = TROW // 7
    
    if max_rows < 1:
        print("Error: Display height too small for text")
        return 0
    
    # Limit the number of rows to what we can display
    if len(text_list) > max_rows:
        print(f"Warning: Can only display {max_rows} rows. Truncating text list.")
        text_list = text_list[:max_rows]
    
    # Prepare each row of text
    for i, text in enumerate(text_list):
        # Prepare the text bytes
        text_bytes = getbytes(text)
        padded = pad(text_bytes, justify=justify)
        
        # Display the row
        row_command = bytes([0x81 + i])  # Row 1 is 0x81, Row 2 is 0x82, etc.
        ser_main.write(reset + row_command)
        
        for j in range(len(padded)):
            if j < TCOLUMN:
                ser_main.write(bytes([padded[j]]))
    
    return len(text_list)

# Example usage functions

def display_standard_text(text, justify=CENTER_JUSTIFY):
    """
    Display standard height text
    """
    # Make sure we have at least the minimum height
    if TROW < 7:
        set_display_dimensions(7, TCOLUMN)
        
    message_bytes = getbytes(text)
    padded = pad(message_bytes, justify=justify)
    fill(padded)

def display_double_height_text(text, justify=CENTER_JUSTIFY):
    """
    Display double height text
    """
    # Ensure we have enough rows for double-height text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
        
    message_bytes = getbytes_double_height(text)
    padded = pad(message_bytes, justify=justify)
    fill(padded)

def display_dual_row_text(top_text, bottom_text, justify=CENTER_JUSTIFY):
    """
    Display two rows of text on a display
    """
    # Ensure we have enough rows for dual row text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
        
    dual_row_text(top_text, bottom_text, justify)

def scroll_double_height_text(text, delay=0.1):
    """
    Scroll double height text from right to left
    """
    # Ensure we have enough rows for double-height text
    if TROW < 14:
        set_display_dimensions(14, TCOLUMN)
        
    message_bytes = getbytes_double_height(text)
    scrollleft(message_bytes, t=delay)

# Examples of how to use the new display modes:
# set_display_dimensions(14, 30)  # Set to 14 rows by 30 columns
# display_standard_text("HELLO WORLD")
# display_double_height_text("BIG TEXT")
# display_dual_row_text("TOP ROW", "BOTTOM ROW")
# scroll_double_height_text("SCROLLING BIG TEXT", delay=0.05)
# multi_row_text(["ROW 1", "ROW 2", "ROW 3"])  # For displays with 21+ rows
