from __future__ import print_function
from __future__ import division
##http://www.flipdots.com/EN/applications/page-15/big_electromagnetic_displays.html
from builtins import zip
from builtins import chr
from builtins import range
from past.utils import old_div
from builtins import object
import serial
import random
import time

#############
# CONSTANTS #
#############

dict = {
    ' ': b'\x00\x00\x00',
    '$': b'2I\x7fI&',
    '(': b'>A',
    ',': b'\x01\x06',
    '0': b'>AAA>',
    '4': b'\x1c$D\x7f\x04',
    '8': b'6III6',
    '<': b'\x08\x14"',
    '@': b'\x1f\x10\x17\x15\x1f',
    'D': b'\x7fAAA>',
    'H': b'\x7f\x08\x08\x08\x7f',
    'L': b'\x7f\x01\x01\x01',
    'P': b'\x7fHHH0',
    'T': b'@@\x7f@@',
    'X': b'A"\x1c"A',
    '\\': b'`\x1c\x03',
    '`': b'@ ',
    'd': b'\x0e\x11\x11\x7f',
    'h': b'\x7f\x10\x10\x10\x0f',
    'l': b'~\x01',
    'p': b'?$$\x18',
    't': b'\x10>\x11',
    'x': b'\x1b\x04\x04\x1b',
    '|': b'w',
    '#': b'\x14\x7f\x14\x7f\x14',
    "'": b'`',
    'space': b'\x00',
    '+': b'\x08\x08>\x08\x08',
    '/': b'\x03\x1c`',
    '3': b'"AII6',
    '7': b'`@GX`',
    ';': b'\x016',
    '?': b' OH0',
    'C': b'>AAA"',
    'G': b'>AAI/',
    'K': b'\x7f\x08\x14"A',
    'O': b'>AAA>',
    'S': b'2III&',
    'W': b'~\x01\x01~\x01\x01~',
    '[': b'\x7fA',
    '_': b'\x01\x01\x01',
    'c': b'\x0e\x11\x11\x11',
    'g': b'\x81\x15\x15\x15\x0e',
    'k': b'\x7f\x06\n\x11',
    'o': b'\x0e\x11\x11\x0e',
    's': b'\t\x15\x15\x12',
    'w': b'\x1e\x01\x01\x1e\x01\x01\x1e',
    '{': b'\x086A',
    '"': b'``',
    '&': b'7IE+\x07',
    '*': b'(\x10|\x10(',
    '.': b'\x01',
    '2': b'!CEI1',
    '6': b'\x1e)II\x06',
    ':': b'6',
    '>': b'"\x14\x08',
    'B': b'\x7fIII6',
    'F': b'\x7fHH@',
    'J': b'\x02\x01A~',
    'N': b'\x7f \x10\x08\x04\x7f',
    'R': b'\x7fHHH7',
    'V': b'x\x06\x01\x06x',
    'Z': b'CEIQa',
    '^': b' @ ',
    'b': b'\x7f\x11\x11\x0e',
    'f': b'\x10?P',
    'j': b'\x11^',
    'n': b'\x1f\x10\x10\x0f',
    'r': b'\x1f\x08\x10',
    'v': b'\x1e\x01\x01\x1e',
    'z': b'\x13\x14\x14\x19',
    '~': b'\x08\x10\x08\x04\x08',
    '!': b'}',
    '%': b'1JL>\x19)F',
    ')': b'A>',
    '-': b'\x08\x08\x08\x08\x08',
    '1': b' \x7f',
    '5': b'rQQQN',
    '9': b'0IIJ<',
    '=': b'\x14\x14\x14\x14',
    'A': b'?HHH?',
    'E': b'\x7fIIA',
    'I': b'\x7f',
    'M': b'\x7f \x10\x08\x10 \x7f',
    'Q': b'<BFB=',
    'U': b'~\x01\x01\x01~',
    'Y': b'`\x10\x0f\x10`',
    ']': b'A\x7f',
    'a': b'\x0e\x11\x11\x1f',
    'e': b'\x0e\x15\x15\r',
    'i': b'\x10_',
    'm': b'\x1f\x10\x10\x0f\x10\x10\x0f',
    'q': b'\x18$$?',
    'u': b'\x1e\x01\x01\x1f',
    'y': b'8\x05\x05>',
    '}': b'A6\x08'
}

BITMASK = [1,2,4,8,0x10,0x20,0x40]
DEFAULT_DELAY = 0.2
RIGHT_JUSTIFY = 1
LEFT_JUSTIFY = 2
CENTER_JUSTIFY = 3
TROW = 7 #will change to 14, was 7, Mickey changed it to match benderbot layout post benderbot usage tho
TCOLUMN = 105 #will change to 30 was 105
ROW_BREAK = 75
reset = b'\x81'
row1 = b'\x81'
row2 = b'\x82'

__author__ = 'boselowitz'


class fallbackserialmain(object):
        LAST_MESSAGE_WAS_CONTROL = False
        CURSOR_POSITION = 0
        SCREEN_MATRIX = []

        def write(self, message):
            for character in message:
                if character > 128:
                    #Row set
                    if self.LAST_MESSAGE_WAS_CONTROL:
                        self.CURSOR_POSITION += (character - 129) * ROW_BREAK
                        self.LAST_MESSAGE_WAS_CONTROL = False
                    #Col set
                    else:
                        self.CURSOR_POSITION = character - 129
                        self.LAST_MESSAGE_WAS_CONTROL = True
                else:
                    if not self.SCREEN_MATRIX:
                        for row in range(TROW):
                            self.SCREEN_MATRIX.append([])
                            for col in range(TCOLUMN):
                                self.SCREEN_MATRIX[row].append(".")

                    character_value = character
                    for row in range(TROW):
                        row_inverse = 6 - row
                        if self.CURSOR_POSITION < len(self.SCREEN_MATRIX[row]):
                            if character_value & BITMASK[row_inverse]:
                                character_value -= BITMASK[row_inverse]
                                self.SCREEN_MATRIX[row][self.CURSOR_POSITION] = "0"
                            else:
                                self.SCREEN_MATRIX[row][self.CURSOR_POSITION] = "."

                    for row in range(TROW):
                        print(" ".join(self.SCREEN_MATRIX[row]))
                    print("\n")

                    self.CURSOR_POSITION += 1
                    self.LAST_MESSAGE_WAS_CONTROL = False


try:
    ser_main = serial.Serial('/dev/tty.usbserial-A3000lDq', 38400)
except (serial.SerialException, OSError):
    print("Main serial port not opened, fallingback to text output")
    ser_main = fallbackserialmain()

def display_image(frame):
    pass

def flip(m,d=1):
    i = 0
    ser_main.write(reset+row1)
    for k in m:
        i+=1
        c = dict[k]
        if i > 15:
            if i == 16:
                ser_main.write(reset+row2)
            c = c[::-1] #For some reason have to do string reversal here.. should email them!! *******
        ser_main.write(c)

#rotate buffer s by d units to the left
def rotate_left(s,d=1):
    return s[d:]+s[:d]

#rotate buffer s by d units to the right
def rotate_right(s,d=1):
    return s[-d:]+s[:-d]

def addspacers(m,spacelen=1):
    return (dict['space']*spacelen).join(m)

def pad(m,padsym='',justify = CENTER_JUSTIFY):
    m = dict['space']+m+dict['space']
    padsym = dict['space']+dict['space'].join([dict[x] for x in padsym])
    if TCOLUMN - len(m) < len(padsym):
        #there is not enough space to pad the full symbols.. fill it instead with spaces
        padsym = dict['space']
    padlen = old_div((TCOLUMN-len(m)),len(padsym)) #this is the number of padsym to be padded
    if padlen == 0 and justify==CENTER_JUSTIFY:
        #no space to pad them properly.. make the pad sym as space
        padsym = dict['space']
        padlen = old_div((TCOLUMN-len(m)),len(padsym))
    extrachr = (TCOLUMN-len(m))%len(padsym) #the remainder
    
    if justify == LEFT_JUSTIFY:
        return m+(padlen*padsym)+(extrachr*dict['space'])
    elif justify == RIGHT_JUSTIFY:
        return (extrachr*dict['space'])+(padlen*padsym)+m
    elif justify == CENTER_JUSTIFY:
        if extrachr%2 == 0:
            sp1 = sp2 = old_div(extrachr,2)
        else:
            sp2 = old_div(extrachr,2)
            sp1 = sp2+1
        if padlen%2 == 0:
            return (sp1*dict['space'])+((old_div(padlen,2))*padsym)+m+((old_div(padlen,2))*padsym)+(sp2*dict['space'])
        else:
            return (sp1*dict['space'])+(((old_div(padlen,2))+1)*padsym)+m+((old_div(padlen,2))*padsym)+(sp2*dict['space'])


def fill(m,fillmask=127):
    ser_main.write(reset+row1)

    for i in range(150):
        if i == ROW_BREAK:
            ser_main.write(reset+row2)

        if (old_div(i, 30)) % 2 == 0:
            if i < len(m):
                ser_main.write(bytes([m[i]&fillmask]))
            else:
                ser_main.write(b"\x00")
        else:
            #Backward row, need to manipulate
            if ((i % 30) + (25 - (10 * (old_div((i % 30), 5))))) + (30 * (old_div(i, 30))) < len(m):
                ser_main.write(bytes([(m[((i % 30) + (25 - (10 * (old_div((i % 30), 5))))) + (30 * (old_div(i, 30)))])&fillmask]))
            else:
                ser_main.write(b"\x00")

    return m


def filltypewriter(message):
    col = 129
    row = 129
    for hex_value in message:
        for position in range(TROW):
            flip_with_new_dot = hex_value | BITMASK[position]
            masked_off_top_bits = flip_with_new_dot & (0x7f >> (6 - position))
            raw_send(bytes([masked_off_top_bits]), col=col, row=row)
            time.sleep(.06)
        raw_send(bytes([hex_value]), col=col, row=row)
        col += 1
        if col == 204:
            row += 1
            col = 129

def fillmakerbot(message):
    col = 129
    row = 129
    for hex_value in message:
        for position in range(TROW):
            if(col % 2 == 0):
                # For even columns, ensure position doesn't exceed BITMASK length
                safe_position = min(position, 6)
                flip_with_new_dot = hex_value | BITMASK[safe_position]
                masked_off_top_bits = flip_with_new_dot & (0x7f >> (6 - safe_position))
            else:
                # For odd columns, ensure we don't get a negative shift value
                safe_position = min(position, 6)
                adjusted_position = 6 - safe_position  # This will always be non-negative
                flip_with_new_dot = hex_value | BITMASK[safe_position]
                masked_off_top_bits = flip_with_new_dot & (0x7f << adjusted_position)
            
            raw_send(bytes([masked_off_top_bits]), col=col, row=row)
            time.sleep(.06)
        
        raw_send(bytes([hex_value]), col=col, row=row)
        col += 1

        if col == 204:
            row += 1
            col = 129

def fillfrombottomup(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(len(BITMASK)):
        btm += BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def fillfromtopdown(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(len(BITMASK)-1,-1,-1):
        btm += BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def scrolldown(m,t=DEFAULT_DELAY,wraparound = False):
    for k in range(TROW):
#  modified this with bytes() for python 3
        m = b''.join([bytes([x>>1]) for x in m])
        fill(m)
        time.sleep(t)
    return m

def scrollup(m,t=DEFAULT_DELAY,wraparound = False):
    for k in range(TROW):
#  was this in python 2      m = b''.join([(x<<1)&127 for x in m])
        m = b''.join([bytes([ (x<<1)&127 ]) for x in m])
        fill(m)
        time.sleep(t)
    return m

def erasefromtopdown(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(len(BITMASK)-1,-1,-1):
        btm -= BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def erasefrombottomup(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(len(BITMASK)):
        btm -= BITMASK[k]
        fill(m,btm)
        time.sleep(t)
    return m

def fillrandomorder(m,t=DEFAULT_DELAY):
    btm = 0
    for k in range(8):
        if k < 6:
            btm= min(random.getrandbits(TROW),127)
        else:
            btm= min(btm+random.getrandbits(TROW),127)
        fill(m,btm)
        time.sleep(t)
    if btm < 127:
        fill(m) #fill it all up in case any of thme are left out
    return m

        # dmult is the # of times delim will be multiplied in succession
def eraserandomorder(m,t=DEFAULT_DELAY):
    btm = 127
    for k in range(8):
        if k < 6:
            btm= max(random.getrandbits(TROW),127)
        else:
            btm= max(btm+random.getrandbits(TROW),127)
        fill(m,btm)
        time.sleep(t)
    if btm < 127:
        clear() #fill it all up in case any of thme are left out
    return m

        # dmult is the # of times delim will be multiplied in succession
def getbytes(m,delim=dict['space'],dmult=1): 
    buf = b''
    #m = repr(m)
    for x in m:
        if not dict.get(x):
            buf+=dict['?']
        else:
            buf+=dict[x]
        buf+=delim*dmult
    return buf[:len(buf)-len(delim*dmult)] #remove the last delim..since we want it only between chars

def clear():
    fill(b'\x00'*TCOLUMN)

                   
def rotateleft(m,t=DEFAULT_DELAY,d = 1): #d is number of columns to be moved each shift
    for k in range(old_div(TCOLUMN,d)):
        fill(m)
        m = m[d:]+m[:d]
        time.sleep(t)
    return m

def rotateright(m,t=DEFAULT_DELAY,d = 1): #d is number of columns to be moved each shift
    for k in range(old_div(TCOLUMN,d)):
        fill(m)
        m = m[-d:]+m[:-d]
        time.sleep(t)
    return m

def scrollleft(m,t=DEFAULT_DELAY,d = 1,pausedelay=None, o=False):
    if not o:
        m = TCOLUMN*dict['space'] + m + TCOLUMN*dict['space']
    else:
        m = TCOLUMN*dict['space'] + m 
    mlen = len(m) - TCOLUMN
    for k in range((old_div(mlen,d))+1):
        fill(m[k*d:(k*d)+TCOLUMN])
        if pausedelay:
            if k == old_div(((old_div(mlen,d))+1),2):
                time.sleep(pausedelay-t)
        #m = m[d:]+m[:d]
        time.sleep(t)
    return m
    
def negative(m): #returns the negative image of the buffer m
# modified with bytes for python 3
    m = b''.join([bytes([x ^ 127]) for x in m])
    return m

def raw_send(b,col=None,row=None): #sends byte b to the flip dot specified by column and row
    print((col,row,[x for x in b]))
    if col:
        ser_main.write(bytes([col]))
    if row:
        ser_main.write(bytes([row]))
    ser_main.write(b)


p = b'\x08\x1c\x3e\x08\x08\x7f'#arrow pattern
pqman = b'\x22\x36\x2a\x22\x1c'
pcbugs = b'\x1e\x34\x22\x34\x1e'
# if trailpattern is set as '\x00'..it will erase the trail of the arrow
# Any other value to trailpatterin will fill the trail with that pattern..
picklist =  [b'\x01', b'\x02', b'\x04', b'\x08', b'\x10', b' b', b'@', b'@', b' b', b'\x10', b'\x08', b'\x04', b'\x02', b'\x01']
opicklist = [b'@', b' b', b'\x10', b'\x08', b'\x04', b'\x02', b'\x01', b'\x01', b'\x02', b'\x04', b'\x08', b'\x10', b' b', b'@']
mpicklist = bytes([x[0][0] | x[1][0] for x in zip(picklist,opicklist)])
#mpicklist is a OR of two sine wave defined by picklist and opicklist

#if we want multi-column animation while its moving left to right..say like that of a pac man eating effect..
#picklist should contain the series of patterns and picklen should always be 1 . Also..each animation should be of the same width(maybe..not sure)
#for e.g. to have the arrow example grow and shrink its triangle head height we would pass into picklen something such as
#picklist = ['\x08\x1c\x3e\x08\x08\x7f','\x08\x08\x1c\x08\x08\x7f','\x08\x08\x08\x08\x08\x7f','\x08\x08\x1c\x08\x08\x7f']
#pac man open close mouth example would be ['\x22\x36\x2a\x22\x1c','\x14\x2a\x22\x22\x1c','\x1c\x22\x22\x22\x1c','\x14\x2a\x22\x22\x1c']
# new big pacman = ['\x41\x36\x77\x7f\x7f\x3e\x1c','\x22\x77\x7f\x7f\x7f\x3e\x1c','\x16\x3e\x7f\x7f\x7f\x3e\x1c','\x1c\x3e\x7f\x7f\x7f\x3e\x1c','\x16\x3e\x7f\x7f\x7f\x3e\x1c','\x22\x77\x7f\x7f\x7f\x3e\x1c']
# and the pcbugs bliking eye would be ['\x1e\x34\x22\x34\x1e','\x1e\x24\x22\x24\x1e']
#new big pacbugs = ['\x3f\x42\x51\x42\x51\x42\x3f','\x3f\x42\x41\x42\x41\x42\x3f']
pacmanlist = [b'\x00\x41\x63\x77\x7f\x3e\x1c',b'\x22\x77\x7f\x7f\x7f\x3e\x1c',b'\x1c\x3e\x7f\x7f\x7f\x3e\x1c',b'\x22\x77\x7f\x7f\x7f\x3e\x1c',b'\x00\x41\x63\x77\x7f\x3e\x1c']
pacmonsterlist = [b'\x3f\x42\x51\x42\x51\x42\x3f',b'\x3f\x42\x41\x42\x41\x42\x3f']
def drawpacman(trail=0,d=1,t=DEFAULT_DELAY):
    if trail == 0:
        trailpattern = b'\x00'
    else:
        trailpattern = b''
    drawpatternlefttoright(p=b'',trailpattern = trailpattern,dist = d,picklist = pacmanlist,picklen=1,t=t)

def drawpacmanchased(monstersnum=2,d=10,t=DEFAULT_DELAY):
    pacmanchased = []
    for i in range(len(pacmanlist)):
        pacmanchased.append(pacmanlist[i]+b'\x00'*d+pacmonsterlist[i%2]+b'\x00'*d+pacmonsterlist[(i+1)%2])
    drawpatternlefttoright(trailpattern = b'\x00',t=t,picklist = pacmanchased)    

def drawpatternlefttoright(p=b'',trailpattern='',dist = 1,picklist=None,picklen=1,t=DEFAULT_DELAY):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    pr = p[::-1]
    plen = len(pr)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    colst = 129 #'\x81'
    rowst = 129 #'\x81'
    '''if not direction:
        colst = 129 #'\x81'
        rowst = 129 #'\x81'
    else:
        colst = 199 #'\xc7'
        rowst = 130 #'\x82'
        '''
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if picklen == 1:
                p = picklist[st]+trailpattern
                pr = p[::-1]
            else:
                if st+picklen <= len(picklist):
                    pr = trailpattern+''.join(picklist[st:st+picklen])
                else:
                    pr = trailpattern+''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])
            plen = len(pr)
            #pr = p[::-1]
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                if picklist and picklen == 1:
                    st = i % len(picklist)
                    p = picklist[st]+trailpattern
                    pr = p[::-1]
                nx = -i - 1
                raw_send(pr[nx:],colst,rowst)
                if i < plen-1:
                    time.sleep(t)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")
        time.sleep(t)
            

def drawpatternrighttoleft(p='',trailpattern='',dist = 1,picklist=None,picklen=1):
    if picklist: #picklist is usually used for sine waves like functions where the value of p varies periodically based on the picklist index and picklen is the len to be picked from picklist for each iteration
        p = picklist[0:picklen]
    p += trailpattern
    plen = len(p)
    if plen > ROW_BREAK or plen < 1:
        return #pattern is too long to be repeated properly
    pr = p[::-1]
    colst = 199 #'\xc7'
    rowst = 130 #'\x82'
    for cyc in range(old_div(TCOLUMN,dist)):
        if picklist:
            #get the p value for this iteration
            st = cyc % len(picklist)
            if st+picklen <= len(picklist):
                p = ''.join(picklist[st:st+picklen])+trailpattern
            else:
                p = ''.join(picklist[-(len(picklist)-st):])+''.join(picklist[:picklen-(len(picklist)-st)])+trailpattern
            pr = p
        '''if (dist*cyc) < plen :
            nx = -(dist*cyc) - 1
            raw_send(pr[nx:],colst,rowst)'''
        if (dist*cyc) == 0:
            for i in range(plen):
                nx = -i - 1
                raw_send(pr[nx:],colst-i,rowst)
        elif (dist*cyc)+plen < ROW_BREAK:
            raw_send(pr,colst+(dist*cyc),rowst)
        elif (dist*cyc) < ROW_BREAK:
            nx = ROW_BREAK - (dist*cyc)
            raw_send(pr[:nx],colst+(dist*cyc),rowst)
            raw_send(pr[nx:],colst+(dist*cyc) - ROW_BREAK + nx,rowst+1)
        else:
            raw_send(pr,colst+(dist*cyc) - ROW_BREAK,rowst+1)
        print ("endline")
