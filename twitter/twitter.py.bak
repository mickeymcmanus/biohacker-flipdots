import random
import time
from requests import ConnectionError
from transition import transition
from twython import Twython, TwythonError, TwythonRateLimitError

__author__ = 'boselowitz'

APP_KEY = "7z2ojwJHMvqgtEVacwGQ"
APP_SECRET = "SMxNf5P8ROHs3qtxtDhFV0O1u8y56x2H79zvo3H7lA"
OAUTH_TOKEN = "1483550870-WlhywvYdmyNp5BPtpcYazI7QjO8ubgw1per0rej"
OAUTH_TOKEN_SECRET = "1j4zzqLg21l5YuvYVAAt3ZmBjwNDpCnevgPZcuHH4I"
LAST_DM_ID = None
LAST_DM_CALL = None
LAST_MENTION_ID = None
LAST_MENTION_CALL = None

twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)
try:
    twitter.verify_credentials()
except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
    print e


#Twitter functionality
def display_direct_messages():
    global LAST_DM_ID
    direct_messages = get_latest_direct_messages()

    for dm in direct_messages:
        if not LAST_DM_ID or dm[u"id"] > LAST_DM_ID:
            LAST_DM_ID = dm[u"id"]

        if dm[u"entities"][u"hashtags"]:
            #Strip out hashtags from text. We don't want to display the hashtags
            dm[u"text"] = " ".join([i[0:] for i in dm[u"text"].split() if not i.startswith("#")])

            possible_transitions = []
            for hashtag in dm[u"entities"][u"hashtags"]:
                try:
                    possible_transitions.append(getattr(transition, hashtag[u"text"]))
                except AttributeError as e:
                    print e

            if len(possible_transitions):
                possible_transitions[random.randint(0, len(possible_transitions) - 1)](dm[u"text"])
            else:
                transition.randomgeneral(dm[u"text"])
        else:
            transition.randomgeneral(dm[u"text"])

        try:
            twitter.send_direct_message(user_id=dm[u"sender_id"],
                                        text="Displayed: " + (dm[u"text"] if len(dm[u"text"]) < 130 else (dm[u"text"][:126] + "...")))
        except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
            print e

        try:
            twitter.destroy_direct_message(id=dm[u"id"])
        except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
            print e


def get_latest_direct_messages():
    global LAST_DM_ID, LAST_DM_CALL

    if LAST_DM_CALL and (time.time() - LAST_DM_CALL) < 60:
        print "One allowing one call in 1 minute"
        return []

    LAST_DM_CALL = time.time()

    try:
        if LAST_DM_ID:
            direct_messages = twitter.get_direct_messages(since_id=LAST_DM_ID)
        else:
            direct_messages = twitter.get_direct_messages()
    except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
        print e
        return []

    for dm in direct_messages:
        if not LAST_DM_ID or dm[u"id"] > LAST_DM_ID:
            LAST_DM_ID = dm[u"id"]

    return direct_messages


def get_latest_mentions():
    global LAST_MENTION_ID, LAST_MENTION_CALL

    if LAST_MENTION_CALL and (time.time() - LAST_MENTION_CALL) < 60:
        print "One allowing one call in 1 minute"
        return []

    LAST_MENTION_CALL = time.time()

    try:
        if LAST_MENTION_ID:
            mentions = twitter.get_mentions_timeline(since_id=LAST_MENTION_ID)
        else:
            mentions = twitter.get_mentions_timeline()
    except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
        print e
        return []

    for mention in mentions:
        if not LAST_MENTION_ID or mention[u"id"] > LAST_MENTION_ID:
            LAST_MENTION_ID = mention[u"id"]

    return mentions


def send_tweet(message):
    try:
        twitter.update_status(status=message)
    except (TwythonError, TwythonRateLimitError, ConnectionError) as e:
        print e
