from __future__ import print_function
from __future__ import absolute_import
import pika
import threading
import time
from .core import core

from PIL import Image
image = Image.open("favicon.png")
image = image.convert("1")

# CURRENT_FRAME = str(bytearray(image.getdata()))
FPS = 5.0

__author__ = 'boselowitz'

def display_frame(CURRENT_FRAME):
    #while True:
    if CURRENT_FRAME:
        fill_value = ""
        frame_to_display = CURRENT_FRAME
        for matrix_row in range(5):
            for col in range(30):
                col_value = 0
                for row in range(7):
                    pixel = ord(frame_to_display[col + (row * 30) + (matrix_row * 210)])
                    if pixel:
                        col_value |= ord(core.BITMASK[6 - row])
                fill_value += chr(col_value)
        core.fill(fill_value)
        connection.sleep(1.0 / FPS)
        print("Displayed Frame")

# t = threading.Thread(target=display_frame)
# t.daemon = True
# try:
#     t.start()
# except (KeyboardInterrupt, SystemExit):
#     exit()

connection = pika.BlockingConnection(pika.ConnectionParameters(host="localhost"))
channel = connection.channel()

channel.exchange_declare(exchange="frames", type="fanout")
queue = channel.queue_declare(exclusive=True) #, arguments={"x-max-length": 1})
channel.queue_bind(exchange="frames", queue=queue.method.queue)

def callback(ch, method, properties, body):
    # global CURRENT_FRAME
    # CURRENT_FRAME = body
    display_frame(body)
    # print "Setting frame"
    # connection.sleep(0)

channel.basic_consume(callback,
                      queue=queue.method.queue,
                      no_ack=True)

channel.start_consuming()
