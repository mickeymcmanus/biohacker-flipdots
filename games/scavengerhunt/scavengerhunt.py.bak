from __future__ import print_function
import os
import json
import time
from transition import transition
from twitter import twitter
from random import choice

__author__ = 'boselowitz'

PUZZLES_DIR = os.path.join(os.path.dirname(__file__), "puzzles")
DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
DATA_EXT = ".json"

current_puzzle_index = 0
individual_stats_text = "You have successfully completed %d out of %d riddles."


def compile_data():
    current_puzzle_name = os.path.join(PUZZLES_DIR, "main_puzzle.json")
    try:
        current_puzzle = json.load(open(current_puzzle_name, "rb"))
    except (IOError, ValueError) as e:
        print(e)
        return

    current_puzzle_data_name = os.path.join(DATA_DIR, current_puzzle[u"name"] + DATA_EXT)
    try:
        current_puzzle_data = json.load(open(current_puzzle_data_name, "rb"))
    except (IOError, ValueError) as e:
        print(e)
        current_puzzle_data = {}

    mentions = twitter.get_latest_mentions()
    for mention in mentions:
        username = mention[u"user"][u"screen_name"]

        if not username in current_puzzle_data:
            current_puzzle_data[username] = {
                u"complete": [],
                u"complete_count": 0,
                u"incomplete": current_puzzle[u"puzzles"],
                u"incomplete_count": current_puzzle[u"puzzle_count"]
            }

        print(mention)
        for puzzle in current_puzzle[u"puzzles"]:
            name = ""
            key = ""
            for hashtag in mention[u"entities"][u"hashtags"]:
                print(hashtag[u"text"], puzzle[u"keys"])
                if hashtag[u"text"] in puzzle[u"keys"]:
                    key = hashtag[u"text"]
                print(hashtag[u"text"], puzzle[u"name"])
                if puzzle[u"name"] == hashtag[u"text"]:
                    name = hashtag[u"text"]

            #If somebody successfully completed a puzzle.
            if key and name:
                print(username, key, name)

                if not puzzle[u"name"] in current_puzzle_data[username][u"complete"]:
                    current_puzzle_data[username][u"complete"].append(puzzle[u"name"])
                    current_puzzle_data[username][u"complete_count"] = len(current_puzzle_data[username][u"complete"])
                    current_puzzle_data[username][u"incomplete"].remove(puzzle[u"name"])
                    current_puzzle_data[username][u"incomplete_count"] = len(current_puzzle_data[username][u"incomplete"])
                else:
                    #Username already completed the puzzle.
                    twitter.send_tweet("@%s you already completed this riddle." % username)
                    return

                json.dump(current_puzzle_data, open(current_puzzle_data_name, "wb"), indent=4)

                puzzle[u"keys"].remove(key)
                json.dump(current_puzzle, open(current_puzzle_name, "wb"), indent=4)
                twitter.send_tweet("@%s %s %s" % (username,
                                                  choice(current_puzzle[u"successful_responses"]),
                                                  individual_stats_text % (current_puzzle_data[username]["complete_count"],
                                                                           current_puzzle["puzzle_count"])))
                return

        #Failed to complete the puzzle
        twitter.send_tweet("@%s %s %s" % (username,
                                          choice(current_puzzle[u"fail_responses"]),
                                          individual_stats_text % (current_puzzle_data[username]["complete_count"],
                                                                   current_puzzle["puzzle_count"])))


def display_riddle(name=None):
    global current_puzzle_index
    current_puzzle_name = os.path.join(PUZZLES_DIR, "main_puzzle.json")
    try:
        current_puzzle = json.load(open(current_puzzle_name, "rb"))
    except (IOError, ValueError) as e:
        print(e)
        return

    transition.righttoleft(current_puzzle[u"puzzles"][current_puzzle_index][u"display_text"])
    current_puzzle_index += 1
    current_puzzle_index %= current_puzzle[u"puzzle_count"]


def display_leader_board():
    compile_data()

    current_puzzle_name = os.path.join(PUZZLES_DIR, "main_puzzle.json")
    try:
        current_puzzle = json.load(open(current_puzzle_name, "rb"))
    except (IOError, ValueError) as e:
        print(e)
        return

    current_puzzle_data_name = os.path.join(DATA_DIR, current_puzzle[u"name"] + DATA_EXT)
    try:
        current_puzzle_data = json.load(open(current_puzzle_data_name, "rb"))
    except (IOError, ValueError) as e:
        print(e)
        current_puzzle_data = {}

    leader_board = sorted(current_puzzle_data.iteritems(),
                          key=lambda x: x[1]["complete_count"],
                          reverse=True)

    if leader_board:
        transition.righttoleft("NAMII Scavenger Hunt Leader Board")
        for x in range(5):
            try:
                transition.righttoleft("#%d %s with (%d/%d)" % (x+1,
                                                                  leader_board[x][0],
                                                                  leader_board[x][1]["complete_count"],
                                                                  current_puzzle["puzzle_count"]))
            except IndexError:
                break

