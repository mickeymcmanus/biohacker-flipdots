#!/usr/bin/env python3
"""
Transition effects for the flipdot display.
This module provides various transition effects for displaying messages.
"""

import time
from random import randint
from core import FlipdotDisplay
from video import video

# Create a single instance of the display to use throughout
display = FlipdotDisplay()

####################
# BASE TRANSITIONS #
####################
def upnext(message):
    """
    'Up Next' transition with flashing and scrolling text.
    
    Args:
        message: Message to display
    """
    for j in range(3):
        for i in range(5):
            display.fill(display.negative(display.pad(display.get_bytes("UP NEXT"), justify=3)))  # CENTER_JUSTIFY is 3
            time.sleep(0.25)
            display.fill(display.pad(display.get_bytes("UP NEXT"), justify=3))
            time.sleep(0.2)
            display.fill(display.negative(display.pad(display.get_bytes("UP NEXT"), justify=3)))
            time.sleep(0.1)
            display.fill(display.pad(display.get_bytes("UP NEXT"), justify=3))
            time.sleep(0.2)
        m = display.get_bytes(message)
        if j == 2:
            display.scroll_left(display.pad(m, justify=3), o=True, t=0.15, d=3)
        else:
            display.scroll_left(m, t=0.15, d=3)
    
    # Create an animations instance for the PacMan animation
    from core import FlipdotAnimations
    animations = FlipdotAnimations(display)
    animations.draw_pacman_chased()

def righttoleft(message):
    """
    Simple right-to-left scrolling transition.
    
    Args:
        message: Message to display
    """
    display.scroll_left(display.pad(display.get_bytes(message), justify=3))

def pop(message):
    """
    Popping transition that alternates between normal and inverted text.
    
    Args:
        message: Message to display
    """
    display.clear()
    for i in range(7):
        display.fill(display.pad(display.get_bytes(message), justify=3))
        time.sleep(0.25)
        display.fill(display.negative(display.pad(display.get_bytes(message), justify=3)))
        time.sleep(0.25)
    display.clear()
    time.sleep(1)

def amdissolve(message):
    """
    Makerbot-style dissolve transition.
    
    Args:
        message: Message to display
    """
    display.fill_makerbot(display.pad(display.get_bytes(message), justify=3))
    time.sleep(2)
    display.fill_typewriter(display.pad(b"", justify=3))

def dissolve(message):
    """
    Random dissolve transition.
    
    Args:
        message: Message to display
    """
    display.fill_makerbot(display.pad(display.get_bytes(message), justify=3))
    time.sleep(2)
    display.erase_random_order(display.pad(display.get_bytes(message), justify=3))

def magichat(message):
    """
    Magic hat transition that shows text coming from the bottom.
    
    Args:
        message: Message to display
    """
    long_string = message
    screens = []
    more = True
    while more:
        if len(long_string) <= 21:
            screens.append(long_string)
            more = False
            break
        for i in range(21, 0, -1):
            if long_string[i] == " " and len(display.get_bytes(long_string[:i])) < 104:
                screens.append(long_string[:i])
                long_string = long_string[i+1:]
                break
    for screen in range(len(screens)):
        display.fill_from_bottom_up(display.pad(display.get_bytes(screens[screen]), justify=3))
        time.sleep(1)
        display.scroll_up(display.pad(display.get_bytes(screens[screen]), justify=3))

def adventurelook(message):
    """
    Adventure-style transition with text appearing and disappearing.
    
    Args:
        message: Message to display
    """
    long_string = message
    screens = []
    more = True
    while more:
        if len(long_string) <= 21:
            screens.append(long_string)
            more = False
            break
        for i in range(21, 0, -1):
            if long_string[i] == " " and len(display.get_bytes(long_string[:i])) < 105:
                screens.append(long_string[:i])
                long_string = long_string[i+1:]
                break
    for screen in range(len(screens)):
        if screen == len(screens) - 1:
            display.fill_from_bottom_up(display.pad(display.get_bytes(screens[screen]), justify=3))
            time.sleep(5)
        else:
            display.fill_from_bottom_up(display.pad(display.get_bytes(screens[screen]), justify=3))
            time.sleep(1)
            display.erase_from_bottom_up(display.pad(display.get_bytes(screens[screen]), justify=3))

def plain(message):
    """
    Plain scrolling transition.
    
    Args:
        message: Message to display
    """
    display.scroll_left(display.get_bytes(message))

#################################
# RANDOMLY PICK BASE TRANSITION #
#################################
TRANSITION_LIST = [plain, upnext, magichat, adventurelook]
GENERAL_TRANSITION_LIST = [plain, magichat, adventurelook]
ANNOUNCEMENT_TRANSITION_LIST = [upnext]

def random_pick(pick_list):
    """
    Pick a random transition from the list.
    
    Args:
        pick_list: List of transition functions
        
    Returns:
        Randomly selected transition function
    """
    return pick_list[randint(0, len(pick_list) - 1)]

def random(message):
    """
    Apply a random transition from all available transitions.
    
    Args:
        message: Message to display
    """
    random_pick(TRANSITION_LIST)(message)

def randomgeneral(message):
    """
    Apply a random general transition.
    
    Args:
        message: Message to display
    """
    random_pick(GENERAL_TRANSITION_LIST)(message)

def randomannouncement(message):
    """
    Apply a random announcement transition.
    
    Args:
        message: Message to display
    """
    random_pick(ANNOUNCEMENT_TRANSITION_LIST)(message)
